{
  "name": "ntwitter",
  "version": "0.5.0",
  "description": "Asynchronous Twitter REST/stream/search client API for node.js.",
  "keywords": [
    "twitter",
    "streaming",
    "oauth"
  ],
  "homepage": "https://github.com/AvianFlu/ntwitter",
  "author": {
    "name": "jdub, changes by AvianFlu"
  },
  "licenses": {
    "type": "MIT",
    "url": "http://github.com/AvianFlu/ntwitter/raw/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/AvianFlu/ntwitter.git"
  },
  "dependencies": {
    "oauth": ">=0.8.4",
    "cookies": "0.1.x",
    "keygrip": "0.2.x"
  },
  "devDependencies": {
    "should": "*",
    "mocha": "*"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./lib/twitter",
  "gitHead": "8edf970a9a38801ceeba7d1bb32af855862d2538",
  "readme": "Asynchronous Twitter client API for node.js\r\n===========================================\r\n\r\n[ntwitter](http://github.com/AvianFlu/ntwitter) is an improved version of jdub's [node-twitter](http://github.com/jdub/node-twitter), which in turn was inspired by, and uses some code from, technoweenie's [twitter-node](http://github.com/technoweenie/twitter-node).\r\n\r\n\r\n## Installation\r\n\r\nYou can install ntwitter and its dependencies with npm: `npm install ntwitter`.\r\n\r\n\r\n## Getting started\r\n\r\nThis library is, for the most part, the same API as `node-twitter`. Much of the documentation below is straight from `node-twitter` - credit goes to [jdub](http://github.com/jdub) for putting all this together in the first place. \r\n\r\nThe most significant API change involves error handling in callbacks. Callbacks now receive the error as a separate parameter, rather than as part of the data. This is consistent with node's standard library. Callbacks should now look something like this:\r\n\r\n``` javascript\r\nfunction (err, result) {\r\n  if (err) return callback(err);\r\n\r\n  // Do something with 'result' here\r\n}\r\n```\r\n\r\nWhere `callback` is the parent function's callback.  (Or any other function you want to call on error.)\r\n\r\n\r\n### Setup API \r\n\r\nThe keys listed below can be obtained from [dev.twitter.com](http://dev.twitter.com) after [setting up a new App](https://dev.twitter.com/apps/new).\r\n\r\n``` javascript\r\nvar twitter = require('ntwitter');\r\n\r\nvar twit = new twitter({\r\n  consumer_key: 'Twitter',\r\n  consumer_secret: 'API',\r\n  access_token_key: 'keys',\r\n  access_token_secret: 'go here'\r\n});\r\n```\r\n\r\n\r\n### REST API \r\n\r\nInteraction with other parts of Twitter is accomplished through their RESTful API.\r\nThe best documentation for this exists at [dev.twitter.com](http://dev.twitter.com).  Convenience methods exist\r\nfor many of the available methods, but some may be more up-to-date than others.\r\nIf your Twitter interaction is very important, double-check the parameters in the code with \r\nTwitter's current documentation.\r\n\r\nNote that all functions may be chained:\r\n\r\n``` javascript\r\ntwit\r\n  .verifyCredentials(function (err, data) {\r\n    console.log(data);\r\n  })\r\n  .updateStatus('Test tweet from ntwitter/' + twitter.VERSION,\r\n    function (err, data) {\r\n      console.log(data);\r\n    }\r\n  );\r\n```\r\n\r\n### Search API \r\n\r\n``` javascript\r\ntwit.search('nodejs OR #node', {}, function(err, data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n### Streaming API \r\n\r\nThe stream() callback receives a Stream-like EventEmitter.\r\n\r\nHere is an example of how to call the `statuses/sample` method:\r\n\r\n``` javascript\r\ntwit.stream('statuses/sample', function(stream) {\r\n  stream.on('data', function (data) {\r\n    console.log(data);\r\n  });\r\n});\r\n```\r\n        \r\nHere is an example of how to call the 'statuses/filter' method with a bounding box over San Fransisco and New York City ( see streaming api for more details on [locations](https://dev.twitter.com/docs/streaming-api/methods#locations) ):\r\n\r\n``` javascript\r\ntwit.stream('statuses/filter', {'locations':'-122.75,36.8,-121.75,37.8,-74,40,-73,41'}, function(stream) {\r\n  stream.on('data', function (data) {\r\n    console.log(data);\r\n  });\r\n});\r\n```\r\n\r\nntwitter also supports user and site streams:\r\n\r\n``` javascript\r\ntwit.stream('user', {track:'nodejs'}, function(stream) {\r\n  stream.on('data', function (data) {\r\n    console.log(data);\r\n  });\r\n  stream.on('end', function (response) {\r\n    // Handle a disconnection\r\n  });\r\n  stream.on('destroy', function (response) {\r\n    // Handle a 'silent' disconnection from Twitter, no end/error event fired\r\n  });\r\n  // Disconnect stream after five seconds\r\n  setTimeout(stream.destroy, 5000);\r\n});\r\n```\r\n\r\n## Contributors\r\n\r\n[Lots of people contribute to this project. You should too!](https://github.com/AvianFlu/ntwitter/contributors)\r\n\r\n## TODO\r\n\r\n- Complete the convenience functions, preferably generated\r\n- Support [recommended reconnection behaviour](https://dev.twitter.com/docs/streaming-apis/connecting#Best_practices) for the streaming APIs\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/AvianFlu/ntwitter/issues"
  },
  "_id": "ntwitter@0.5.0",
  "_shasum": "bfd4dc307987bc29274991abb04efb29263e1240",
  "_from": "git://github.com/hardlifeofapo/ntwitter.git",
  "_resolved": "git://github.com/hardlifeofapo/ntwitter.git#8edf970a9a38801ceeba7d1bb32af855862d2538"
}
